<?xml version="1.0"?>
<!DOCTYPE modification SYSTEM "http://www.simplemachines.org/xml/modification">
<modification xmlns="http://www.simplemachines.org/xml/modification" xmlns:smf="http://www.simplemachines.org/">
    <id>Ezerous:SMF-PackageUploadFix</id>
    <version>1.0.0</version>
    <file name="$sourcedir/Subs-Package.php">
        <operation>
            <search position="replace"><![CDATA[($crc['crc32'] != smf_crc32($data))]]></search>
            <add><![CDATA[($crc['crc32'] != smf_crc32($data) && $crc['crc32'] != crc32($data))]]></add>
        </operation>
        <operation>
            <search position="replace"><![CDATA[function read_zip_data($data, $destination, $single_file = false, $overwrite = false)
{
	umask(0);
	if ($destination !== null && !file_exists($destination) && !$single_file)
		mktree($destination, 0777);

	// Look for the PK header...
	if (substr($data, 0, 2) != 'PK')
		return false;

	// Find the central whosamawhatsit at the end; if there's a comment it's a pain.
	if (substr($data, -22, 4) == 'PK' . chr(5) . chr(6))
		$p = -22;
	else
	{
		// Have to find where the comment begins, ugh.
		for ($p = -22; $p > -strlen($data); $p--)
		{
			if (substr($data, $p, 4) == 'PK' . chr(5) . chr(6))
				break;
		}
	}

	$return = array();

	// Get the basic zip file info.
	$zip_info = unpack('vfiles/Vsize/Voffset', substr($data, $p + 10, 10));

	$p = $zip_info['offset'];
	for ($i = 0; $i < $zip_info['files']; $i++)
	{
		// Make sure this is a file entry...
		if (substr($data, $p, 4) != 'PK' . chr(1) . chr(2))
			return false;

		// Get all the important file information.
		$file_info = unpack('Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len/vcomment_len/vdisk/vinternal/Vexternal/Voffset', substr($data, $p + 16, 30));
		$file_info['filename'] = substr($data, $p + 46, $file_info['filename_len']);

		// Skip all the information we don't care about anyway.
		$p += 46 + $file_info['filename_len'] + $file_info['extra_len'] + $file_info['comment_len'];

		// If this is a file, and it doesn't exist.... happy days!
		if (substr($file_info['filename'], -1, 1) != '/' && !file_exists($destination . '/' . $file_info['filename']))
			$write_this = true;
		// If the file exists, we may not want to overwrite it.
		elseif (substr($file_info['filename'], -1, 1) != '/')
			$write_this = $overwrite;
		// This is a directory, so we're gonna want to create it. (probably...)
		elseif ($destination !== null && !$single_file)
		{
			// Just a little accident prevention, don't mind me.
			$file_info['filename'] = strtr($file_info['filename'], array('../' => '', '/..' => ''));

			if (!file_exists($destination . '/' . $file_info['filename']))
				mktree($destination . '/' . $file_info['filename'], 0777);
			$write_this = false;
		}
		else
			$write_this = false;

		// Okay!  We can write this file, looks good from here...
		if ($write_this && $destination !== null)
		{
			if (strpos($file_info['filename'], '/') !== false && !$single_file)
				mktree($destination . '/' . dirname($file_info['filename']), 0777);

			// Check that the data is there and does exist.
			if (substr($data, $file_info['offset'], 4) != 'PK' . chr(3) . chr(4))
				return false;

			// Get the actual compressed data.
			$file_info['data'] = substr($data, $file_info['offset'] + 30 + $file_info['filename_len'] + $file_info['extra_len'], $file_info['compressed_size']);

			// Only inflate it if we need to ;).
			if ($file_info['compressed_size'] != $file_info['size'])
				$file_info['data'] = @gzinflate($file_info['data']);

			// If we're looking for a specific file, and this is it... ka-bam, baby.
			if ($single_file && ($destination == $file_info['filename'] || $destination == '*/' . basename($file_info['filename'])))
				return $file_info['data'];
			// Oh?  Another file.  Fine.  You don't like this file, do you?  I know how it is.  Yeah... just go away.  No, don't apologize.  I know this file's just not *good enough* for you.
			elseif ($single_file)
				continue;

			package_put_contents($destination . '/' . $file_info['filename'], $file_info['data']);
		}

		if (substr($file_info['filename'], -1, 1) != '/')
			$return[] = array(
				'filename' => $file_info['filename'],
				'size' => $file_info['size'],
				'skipped' => false
			);
	}

	if ($destination !== null && !$single_file)
		package_flush_cache();

	if ($single_file)
		return false;
	else
		return $return;
}]]></search>
	<add><![CDATA[function read_zip_data($data, $destination = null, $single_file = false, $overwrite = false)
{
	umask(0);
	if ($destination !== null && (substr($destination, 0, 2) != '*/') && !file_exists($destination) && !$single_file)
		mktree($destination, 0777);

	// Search for the end of directory signature 0x06054b50.
	if (($data_ecr = strrpos($data, "\x50\x4b\x05\x06")) === false)
		return false;

	$return = [];

	// End of central directory record (EOCD)
	$cdir = unpack('vdisk/@4/vdisk_entries/ventries/@12/Voffset', substr($data, $data_ecr + 4, 16));

	// We only support a single disk.
	if ($cdir['disk_entries'] != $cdir['entries']) {
		return false;
	}

	// First central file directory
	$pos_entry = $cdir['offset'];

	for ($i = 0; $i < $cdir['entries']; $i++) {
		// Central directory file header
		$header = unpack('Vcompressed_size/@8/vlen1/vlen2/vlen3/vdisk/@22/Voffset', substr($data, $pos_entry + 20, 26));

		// Sanity check: same disk?
		if ($header['disk'] != $cdir['disk']) {
			continue;
		}

		// Next central file directory
		$pos_entry += 46 + $header['len1'] + $header['len2'] + $header['len3'];

		// Local file header (so called because it is in the same file as the data in multi-part archives)
		$file_info = unpack(
			'vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len',
			substr($data, $header['offset'] + 6, 24)
		);

		$file_info['filename'] = substr($data, $header['offset'] + 30, $file_info['filename_len']);
		$is_file = substr($file_info['filename'], -1) != '/';

		/*
			* If the bit at offset 3 (0x08) of the general-purpose flags field
			* is set, then the CRC-32 and file sizes are not known when the header
			* is written. The fields in the local header are filled with zero, and
			* the CRC-32 and size are appended in a 12-byte structure (optionally
			* preceded by a 4-byte signature) immediately after the compressed data:
			*/
		if ($file_info['flag'] & 0x08) {
			$gplen = $header['offset'] + 30 + $file_info['filename_len'] + $file_info['extra_len'] + $header['compressed_size'];

			// The spec allows for an optional header in the general purpose record
			if (substr($data, $gplen, 4) === "\x50\x4b\x07\x08") {
				$gplen += 4;
			}

			if (($general_purpose = unpack('Vcrc/Vcompressed_size/Vsize', substr($data, $gplen, 12))) !== false) {
				$file_info = $general_purpose + $file_info;
			}
		}

		$write_this = false;

		if ($destination !== null) {
			// If hunting for a file in subdirectories, pass to subsequent write test...
			if ($single_file && $destination !== null && (substr($destination, 0, 2) == '*/')) {
				$write_this = true;
			}
			// If this is a file, and it doesn't exist.... happy days!
			elseif ($is_file) {
				$write_this = !@file_exists($destination . '/' . $file_info['filename']) || $overwrite;
			}
			// This is a directory, so we're gonna want to create it. (probably...)
			elseif (!$single_file) {
				$file_info['filename'] = strtr($file_info['filename'], ['../' => '', '/..' => '']);

				if (!file_exists($destination . '/' . $file_info['filename'])) {
					mktree($destination . '/' . $file_info['filename'], 0777);
				}
			}
		}

		// Get the actual compressed data.
		$file_info['data'] = substr(
			$data,
			$header['offset'] + 30 + $file_info['filename_len'] + $file_info['extra_len'],
			$file_info['compressed_size']
		);

		// Only for the deflate method (the most common)
		if ($file_info['compression'] == 8) {
			$file_info['data'] = gzinflate($file_info['data']);
		}
		// We do not support any other compression methods.
		elseif ($file_info['compression'] != 0) {
			continue;
		}

		// PKZip/ITU-T V.42 CRC-32
		if (hash('crc32b', $file_info['data']) !== sprintf('%08x', $file_info['crc'])) {
			continue;
		}

		// Okay! We can write this file, looks good from here...
		if ($write_this) {
			// If we're looking for a specific file, and this is it... ka-bam, baby.
			if ($single_file && ($destination == $file_info['filename'] || $destination == '*/' . basename($file_info['filename']))) {
				return $file_info['data'];
			}

			// Oh, another file? Fine. You don't like this file, do you?  I know how it is.  Yeah... just go away.  No, don't apologize. I know this file's just not *good enough* for you.
			if ($single_file)
				continue;

			if (!$single_file && strpos($file_info['filename'], '/') !== false) {
				mktree($destination . '/' . dirname($file_info['filename']), 0777);
			}

			package_put_contents($destination . '/' . $file_info['filename'], $file_info['data']);
		}

		if ($is_file) {
			$return[] = [
				'filename' => $file_info['filename'],
				'md5' => md5($file_info['data']),
				'preview' => substr($file_info['data'], 0, 100),
				'size' => $file_info['size'],
				'skipped' => false,
			];
		}
	}

	if ($destination !== null && !$single_file)
		package_flush_cache();

	return $single_file ? false : $return;
}]]></add>
	</operation>
    </file>
</modification>